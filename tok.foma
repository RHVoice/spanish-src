# Copyright (C) 2024  Mateo Cedillo <angelitomateocedillo@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

source romans.foma

define CaseVariants 
a -> a|A , 
á -> á|Á , 
b -> b|B , 
c -> c|C , 
d -> d|D , 
e -> e|E , 
é -> é|É , 
f -> f|F , 
g -> g|G , 
h -> h|H , 
i -> i|I , 
í -> í|Í , 
j -> j|J , 
k -> k|K , 
l -> l|L , 
m -> m|M , 
n -> n|N , 
ñ -> ñ|Ñ , 
o -> o|O , 
ó -> ó|Ó , 
p -> p|P , 
q -> q|Q , 
r -> r|R , 
s -> s|S , 
t -> t|T , 
u -> u|U , 
ú -> ú|Ú , 
ü -> ü|Ü , 
v -> v|V , 
w -> w|W , 
# X is problematic here.
#x -> x|X , 
y -> y|Y , 
z -> z|Z ; 

define ConsonantLetterSequence 
[b|c|d|f|g|h|j|k|l|m|n|ñ|p|q|r|s|t|v|w|x|z]+ ; 

define LetterSequence 
[ConsonantLetterSequence .o. CaseVariants].l ; 

define SmallLetter a|á|b|c|d|e|é|f|g|h|i|í|j|k|l|m|n|ñ|o|ó|p|q|r|s|t|u|ú|ü|v|w|x|y|z;
define CapitalLetter A|Á|B|C|D|E|É|F|G|H|I|Í|J|K|L|M|N|Ñ|O|Ó|P|Q|R|S|T|U|Ú|Ü|V|W|X|Y|Z;
define CapitalLetterWithoutRoman CapitalLetter - [[I|X]:[?+]] ; 
define Letter SmallLetter | CapitalLetter;
define atSym %@ ; 
define ExceptionalWord 
[[a|A] %. [m|M] %.] | 
[[p|P] %. [m|M] %.] | 
[[a|A] %. [c|C] %.] | 
[[d|D] %. [c|C] %.] | 
[[e|E] [t|T] [c|C] %.] | 
[[w|W] [i|I] %- [f|F] [i|I]] ; 
define NZDigit 1|2|3|4|5|6|7|8|9;
define Digit %0|NZDigit;
define ExceptDigit   \NZDigit ; 
define UnformattedNumber [Digit Digit*] ;
define Number  UnformattedNumber;
define DecimalSeparator %.|%,;
define Word Letter+ | ExceptionalWord ;

define Stage1 
Number @-> ... num || _ ,, 
Word @-> ... word || _ .#. | \Letter ,, 
\[Letter | Digit] @-> ... sym || _ ; 

define Stage2 
[..] -> lseq || CapitalLetter _ CapitalLetter SmallLetter ,, 
#word -> lseq || CapitalLetterWithoutRoman CapitalLetterWithoutRoman CapitalLetterWithoutRoman _ ,,
word -> lseq || [.#.|word|num|sym] LetterSequence _ ,, 
word -> num || [.#.|sym] ESRomanNumeral _ [.#.|[? sym]] ,, 
sym -> num || [sym|.#.] %- _ Digit,
sym -> num || [sym|.#.] %+ _ Digit,
num DecimalSeparator _ Digit+,,
num -> dig || Digit^16 _ ,, 
# We will handle zeros here, especially for decimals. Numbers.foma uses zeros (0+digit) as a part of rules.
# Zeros at start:
num -> dig || .#. %0 NZDigit+ _ , .#. %0^2 NZDigit+ _ , .#. %0^3 NZDigit+ _ ,, 
# Zeros at the end. 0.05, 0.005, 0.0005, etc. Only occurrences ending in 0+digit.
num -> dig || ExceptDigit %0 NZDigit _ .#. , ExceptDigit %0^2 NZDigit _ .#. , ExceptDigit %0^3 NZDigit _ .#. ,, 
[num:0] [%º|%ª] [sym:num] -> ; 

define Stage3 
dig -> num || NZDigit+ %0^2 NZDigit _ .#. , NZDigit+ %0^3 NZDigit _ .#. , NZDigit+ %0^4 NZDigit _ .#. , NZDigit+ %0^5 NZDigit _ .#. , NZDigit+ %0^6 NZDigit _ .#. , NZDigit+ %0^7 NZDigit _ .#. ,, 
#lseq:0 %' sym:word -> || .#. | [\%' sym] _ .#. | Letter ,, 
word -> lseq || .#. _ ;
#num -> sym || DecimalSeparator _ Digit+ num DecimalSeparator num,
# DecimalSeparator num Digit+ num DecimalSeparator _ ; 

#source special_chars.foma

regex 
#NormalizeCharacters.o. 
Stage1 .o. 
Stage2 .o. 
Stage3;
